---
title: "Uncanny Valley - Manuscript"
author: "Kimberly A. Brink"
date: "June 30, 2016"
output: html_document
---
###Survey Questions

Uncanny Valley 1: Do you feel the robot is creepy?

Uncanny Valley 2: Does the robot make you feel weird?

Uncanny Valley 3: Would you want to play with the robot?

Agency 1: Can the robot do things on purpose?

Agency 2: When the robot moves does it choose to move?

Internal State 1: Does the robot think for itself?

Internal State 2: Does the robot know the difference between good and bad?

Internal State 3: Would the robot feel pain?

Internal State 4: Does the robot have feelings?

Internal State 5: Would the robot feel scared?

Internal State 6: Would the robot feel hungry?

Human-likeness 1: Is this robot like a human?

Exploratory 1: Does the robot know it's a robot?

```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.path='Manuscript Figures/', dev=c('png','postscript'), fig.width = 8, fig.height = 8, echo=FALSE, warning=FALSE, message=FALSE)
```

```{r load_libraries}
library(lubridate)
library(Hmisc)
library(plyr)
library(pander)
```

```{r standard_error}
s.error <- function(x) sd(x,na.rm=TRUE)/sqrt(length(x))
```

```{r safe_ifelse}
safe.ifelse <- function(cond, yes, no) {
      class.y <- class(yes)
      if ("factor" %in% class.y) {  # Note the small condition change here
        levels.y = levels(yes)
      }
      X <- ifelse(cond,yes,no)
      if ("factor" %in% class.y) {  # Note the small condition change here
        X = as.factor(X)
        levels(X) = levels.y
      } else {
        class(X) <- class.y
      }
      return(X)
}
```

```{r screeplot_factanal}
screeplot.factanal <- function(fa.fit,xlab="factor",ylab="eigenvalue",...) {
	# sum-of-squares function for repeated application
	sosq <- function(v) {sum(v^2)}
	# Get the matrix of loadings
	my.loadings <- as.matrix(fa.fit$loadings)
	# Eigenvalues can be recovered as sum of
	# squares of each column
	evalues <- apply(my.loadings,2,sosq)
	plot(evalues,xlab=xlab,ylab=ylab,...)
}
```

```{r part_cor_function, echo = FALSE}
#runs a partial correlation that can handle missing values
part.cor <- function(x, y, z){
  xres <- residuals(lm(x ~ z, na.action = na.exclude))
  yres <- residuals(lm(y ~ z, na.action = na.exclude)) 
  result <- cor.test(xres, yres) 
  m = data.frame(1)
  m$estimate = result$estimate 
  m$tvalue = result$statistic 
  m$df = result$parameter
  m$p.value = result$p.value
  return(m)
}

```{r plot_settings}
responseAxis <- 1.3
responseAxis2 <- 1.9
ageAxis <- 2
humanColor = 'red'
machineColor = 'darkblue'
plotFill = 'white'
titleSize = 3
titleSizeSmall = 2
titleSizeExtraSmall = 1.5
font = "Georgia"
lineWidth = 5
```

```{r barByAge_plot_function}
barByAge <-function(v.back,v.front,data,title){
means.back <- aggregate(v.back~AgeGroup,data,mean)
means.front <- aggregate(v.front~AgeGroup,data,mean)

se.back <- aggregate(v.back~AgeGroup,data,s.error)
se.front <- aggregate(v.front~AgeGroup,data,s.error)

means.mat<-matrix(c(means.back$v.back,means.front$v.front),ncol=4,byrow=T)-1
se.mat<-matrix(c(se.back$v.back,se.front$v.front),ncol=4,byrow=FALSE)

colnames(means.mat) <- c('<6','6-9','9-12','>12')
rownames(means.mat) <- c('Machine-like','Human-like')
#means <- as.table(means)
means.matR <- round(means.mat,2)
g.range = range(0,ceiling(max(means.mat)+1))

plot.new()
barCenters <- barplot(means.mat, col=c(machineColor,humanColor), legend = rownames(means.mat), beside = TRUE, ylim=g.range, yaxt='n',las=1,main=title, cex.main = 2.5)
axis(2, at = c(0:3), labels = c('', 'A little bit', 'A medium amount', 'A lot'), cex.axis = responseAxis)
arrows(barCenters, means.mat-se.mat, barCenters, means.mat+se.mat, lwd = 3, length=0.05, angle=90, code=3)
text(barCenters,means.mat+1.5*se.mat+.1,label=means.matR, cex = responseAxis)
}
```


```{r load_file}
#library Hmisc
filename <- "/Volumes/lsa-research01/ALL STUDIES/Current Studies/Uncanny Valley/UV - Data.sav"
UV.original <- spss.get(filename,datevars=c("DOB","DOT"),use.value.labels=F)
```

```{r formatting}
#library plyr
UV.original <- UV.original[UV.original$Order==1|UV.original$Order==2|is.na(UV.original$Order),]
UV.original = UV.original[which(!is.na(UV.original$SubID)),]

UV.original$Age = NULL
UV.original$AgeGroup = NULL
UV.original$AgeYear = NULL
UV.original$COMME0 = NULL
names(UV.original)[names(UV.original) == 'VAR00001'] <- 'Comments'
names(UV.original)[names(UV.original) == 'PA11'] <- 'PQ11'

UV.Nao <- UV.original[UV.original$Condition==3,]
UV.Front <- UV.original[UV.original$Condition==2,]
UV.Back <- UV.original[UV.original$Condition==1,]

UV.Nao = UV.Nao[which(!is.na(UV.Nao$SubID)),]
UV.Front = UV.Front[which(!is.na(UV.Front$SubID)),]
UV.Back = UV.Back[which(!is.na(UV.Back$SubID)),]

names(UV.Nao) <- c("SubID","Sex","DOB","DOT","Order","Condition","UV1.Nao","UV2.Nao","UV3.Nao","A1.Nao","A2.Nao","IS1.Nao","IS2.Nao","IS3.Nao","IS4.Nao","IS5.Nao","IS6.Nao","HL1.Nao","E1.Nao","PQ1","PQ2","PQ3","PQ4","PQ5","PQ6","PQ7","PQ8","PQ9","PQ10","PQ11","PQ12","PQ13","PQ14","PQ15a","PQ15b","PQ16","Comments")

UV.Nao=UV.Nao[,!(names(UV.Nao) %in% c("Sex","DOB","DOT","Order","PQ1","PQ2","PQ3","PQ4","PQ5","PQ6","PQ7","PQ8","PQ9","PQ10","PQ11","PQ12","PQ13","PQ14","PQ15a","PQ15b","PQ16","Comments"))]

names(UV.Front) <- c("SubID","Sex","DOB","DOT","Order","Condition","UV1.Front","UV2.Front","UV3.Front","A1.Front","A2.Front","IS1.Front","IS2.Front","IS3.Front","IS4.Front","IS5.Front","IS6.Front","HL1.Front","E1.Front","PQ1","PQ2","PQ3","PQ4","PQ5","PQ6","PQ7","PQ8","PQ9","PQ10","PQ11","PQ12","PQ13","PQ14","PQ15a","PQ15b","PQ16","Comments")
names(UV.Back) <- c("SubID","Sex","DOB","DOT","Order","Condition","UV1.Back","UV2.Back","UV3.Back","A1.Back","A2.Back","IS1.Back","IS2.Back","IS3.Back","IS4.Back","IS5.Back","IS6.Back","HL1.Back","E1.Back","PQ1","PQ2","PQ3","PQ4","PQ5","PQ6","PQ7","PQ8","PQ9","PQ10","PQ11","PQ12","PQ13","PQ14","PQ15a","PQ15b","PQ16","Comments")

UV.Nao$Condition = NULL
UV.Back$Condition = NULL
UV.Front$Condition = NULL

#This is not working correctly
UV.NB <- join( UV.Back,UV.Nao )
UV.NF <- join( UV.Front,UV.Nao )
UV.Total <- merge( UV.NB,UV.NF,by="SubID",all.x=T,all.y=T )

UV = UV.Total[c("SubID","UV1.Front","UV2.Front","UV3.Front","A1.Front","A2.Front","IS1.Front","IS2.Front","IS3.Front","IS4.Front","IS5.Front","IS6.Front","HL1.Front","E1.Front","UV1.Back","UV2.Back","UV3.Back","A1.Back","A2.Back","IS1.Back","IS2.Back","IS3.Back","IS4.Back","IS5.Back","IS6.Back","HL1.Back","E1.Back")]

for (var in  c("Sex","DOB","DOT","Order","UV1.Nao","UV2.Nao","UV3.Nao","A1.Nao","A2.Nao","IS1.Nao","IS2.Nao","IS3.Nao","IS4.Nao","IS5.Nao","IS6.Nao","HL1.Nao","E1.Nao","PQ1","PQ2","PQ3","PQ4","PQ5","PQ6","PQ7","PQ8","PQ9","PQ10","PQ11","PQ12","PQ13","PQ14","PQ15a","PQ15b","PQ16","Comments")) {
  
  UV[[var]] = safe.ifelse(is.na(UV.Total[[paste(var,".x",sep="")]]),UV.Total[[paste(var,".y",sep="")]],UV.Total[[paste(var,".x",sep="")]])
}

```


```{r calculate_variables}
#library lubridate
UV$Age = (year(as.period(interval(UV$DOB, UV$DOT)))*12) + month(as.period(interval(UV$DOB, UV$DOT))) + (day(as.period(interval(UV$DOB, UV$DOT)))/30)
UV$AgeYears = UV$Age/12
UV$AgeGroup = factor(ifelse(UV$Age<=72, "1", ifelse(UV$Age<=108, "2", ifelse(UV$Age<=144, "3", "4"))))
UV = UV[which(UV$AgeYears>1),]
isGirl <- UV$Sex == "1"
#UV$UV_index = (UV$UV1 + UV$UV2) / 2
#UV$CondByAge = UV$Condition * UV$Age
```

`r dim(UV)[1]` children (`r sum(UV$Sex == "1")` females), `r round(min(UV$AgeYears),0)` to `r round(max(UV$AgeYears),0)` years old (M = `r round(mean(UV$AgeYears),2)`) were recruited from a local Natural History Museum. The experimenter randomly assigned children to watch one of two videos: a video of a machine-like robot or a video of a human-like one. Children then answered a series of questions concerning their beliefs about the robotâ€™s abilities. In the machine-like robot condition `r sum(UV$Order==1)` children watched 24 s of the robot Kaspar filmed from behind, so that only its wiring and electrical components could be seen (Fig. 1). In the human-like robot condition`r sum(UV$Order==2)` children watched 24 s of video of the robot Kaspar filmed from the front, where its humanlike face was clearly visible (Fig. 1). 

##Exploratory factor analysis for Kaspar Back
Factor analysis with nonorthogonal promax rotation
```{r EFA_Back_1}
Q.Back <- c("UV1.Back","UV2.Back","UV3.Back","A1.Back","A2.Back","IS1.Back","IS2.Back","IS3.Back","IS4.Back", "IS5.Back","IS6.Back","E1.Back","HL1.Back")

#Q.Back <- c("UV1.Back","UV2.Back","A2.Back","IS1.Back","IS2.Back","IS3.Back", "IS5.Back","IS6.Back","HL1.Back")

efa.QB <- factanal(na.omit(UV[Q.Back]), 4, rotation="promax",scores="regression")
screeplot.factanal(efa.QB)

efa.QB <- factanal(na.omit(UV[Q.Back]), 3, rotation="promax",scores="regression")
print(efa.QB, digits=2, cutoff=.3, sort=TRUE)
```

```{r EFA_Front_1}
Q.Front <- c("UV1.Front","UV2.Front","UV3.Front","A1.Front","A2.Front","IS1.Front","IS2.Front","IS3.Front","IS4.Front", "IS5.Front","IS6.Front","E1.Front","HL1.Front")

#Q.Front <- c("UV1.Front","UV2.Front","A2.Front","IS1.Front","IS2.Front","IS3.Front","IS5.Front","IS6.Front","HL1.Front")

efa.QF <- factanal(na.omit(UV[Q.Front]), 4, rotation="promax",scores="regression")
screeplot.factanal(efa.QF)

efa.QF <- factanal(na.omit(UV[Q.Front]), 3, rotation="promax",scores="regression")
print(efa.QF, digits=2, cutoff=.3, sort=TRUE)
```

```{r EFA_Back_2}
Q.Back <- c("UV1.Back","UV2.Back","A2.Back","IS1.Back","IS2.Back","IS3.Back","IS5.Back","IS6.Back")

efa.QB <- factanal(na.omit(UV[Q.Back]), 4, rotation="promax",scores="regression")
screeplot.factanal(efa.QB)

efa.QB <- factanal(na.omit(UV[Q.Back]), 3, rotation="promax",scores="regression")
print(efa.QB, digits=2, cutoff=.3, sort=TRUE)

back.factor1 <- c("IS1.Back","IS2.Back","A2.Back") #think, moral, choose 
back.factor2 <- c("IS3.Back","IS5.Back","IS6.Back") #pain,fear,hunger 
back.factor3 <- c("UV1.Back","UV2.Back")

a.back.factor1 = psych::alpha(UV[back.factor1]) #alpha = 0.77
a.back.factor2 = psych::alpha(UV[back.factor2]) #alpha = 0.73
a.back.factor3 = psych::alpha(UV[back.factor3],check.keys=TRUE) #alpha = 0.7
```

Removed E1 for cross-loading in machine-like condition. Removed A1 for not loading on any factor in the machine-like condition and for cross-loading in the human-like condition. Removed UV3 and IS4 for cross-loading in the human condition. Removed HL1 because it is not easily interpretable as an item for any of the factors.

I removed "Does the robot have feelings?" from analysis, because it often resulted in cross loading and created uninterpretable results. 

After considering Kaiserâ€™s criterion (eigenvalues â‰¥ 1), a scree plot, and model fit indices, the results suggested a three factor model. According to Kaiser's criterion, 3 factors were recommended. The chi-square test of model fit supported the three factor solution, but not 2, $\chi^2$(`r efa.QB$dof`) = `r round(efa.QB$STATISTIC,2)`, $p =$ `r round(efa.QB$PVAL,2)`. The chi-square test is suitable for this sample of `r sum(UV$Order==1)` (less than 500).

This left three factors: Factor 1 (think, moral, choose) with loadings greater than 0.5, $\alpha =$ `r round(a.back.factor1$total[1],2)`, Factor 2 (pain, fear, hunger) with loadings greater than 0.4, $\alpha =$ `r round(a.back.factor2$total[1],2)`, and Factor 3 (creepy, weird) with loadings greater than 0.75,  $\alpha =$ `r round(a.back.factor3$total[1],2)`.

##Exploratory factor analysis for Kaspar Front
Factor analysis with nonorthogonal promax rotation

```{r EFA_Front_2}
Q.Front <- c("UV1.Front","UV2.Front","A2.Front","IS1.Front","IS2.Front","IS3.Front","IS5.Front","IS6.Front")

efa.QF <- factanal(na.omit(UV[Q.Front]), 4, rotation="promax",scores="regression")
screeplot.factanal(efa.QF)

efa.QF <- factanal(na.omit(UV[Q.Front]), 3, rotation="promax",scores="regression")
print(efa.QF, digits=2, cutoff=.3, sort=TRUE)

front.factor1 <- c("IS3.Front","IS5.Front","IS6.Front") #pain,fear,hunger 
front.factor2 <- c("IS1.Front","A2.Front", "IS2.Front") #think, moral, choose
front.factor3 <- c("UV1.Front","UV2.Front")

a.front.factor1 = psych::alpha(UV[front.factor1]) #alpha = .86
a.front.factor2 = psych::alpha(UV[front.factor2]) #alpha = .66
a.front.factor3 = psych::alpha(UV[front.factor3]) #alpha = .75
```

After considering Kaiserâ€™s criterion (eigenvalues â‰¥ 1), a scree plot, and model fit indices, the results suggested a three factor model. According to Kaiser's criterion, 5 factors are recommended. However, the fourth and fifth factors are not interpretable and only have one item. Therefore, we assessed three factors. The chi-square test of model fit supported the three factor solution, but not 2, $\chi^2$(`r efa.QF$dof`) = `r round(efa.QF$STATISTIC,2)`, $p =$ `r round(efa.QF$PVAL,2)`. The chi-square test is suitable for this sample of `r sum(UV$Order==2)` (less than 500).

This left three factors: Factor 1 (pain, fear, hunger) with loadings greater than 0.75, $\alpha =$ `r round(a.front.factor1$total[1],2)`, Factor 2 (think, choose, moral, aware) with loadings greater than 0.4, $\alpha =$ `r round(a.front.factor2$total[1],2)`, and Factor 3 (creepy, weird) with loadings greater than 0.75,  $\alpha =$ `r round(a.front.factor3$total[1],2)`.

```{r Uncanny_Index}
UV$UVindex.Back = (UV$UV1.Back+UV$UV2.Back)/2
UV$UVindex.Front = (UV$UV1.Front+UV$UV2.Front)/2

barByAge(UV$UVindex.Back,UV$UVindex.Front,UV, "Uncanny Index")

pander(t.test(UV[which(UV$AgeGroup==1),]$UVindex.Back,UV[which(UV$AgeGroup==1),]$UVindex.Front))
pander(t.test(UV[which(UV$AgeGroup==2),]$UVindex.Back,UV[which(UV$AgeGroup==2),]$UVindex.Front))
pander(t.test(UV[which(UV$AgeGroup==3),]$UVindex.Back,UV[which(UV$AgeGroup==3),]$UVindex.Front))
pander(t.test(UV[which(UV$AgeGroup==4),]$UVindex.Back,UV[which(UV$AgeGroup==4),]$UVindex.Front))
```


```{r Agency_Index}
UV$Agency.Back = (UV$IS1.Back+UV$IS2.Back+UV$A2.Back)/3
UV$Agency.Front = (UV$IS1.Front+UV$IS2.Front+UV$A2.Front)/3

barByAge(UV$Agency.Back,UV$Agency.Front,UV, "Agency Composite")
pander(t.test(UV[which(UV$AgeGroup==4),]$Agency.Back,UV[which(UV$AgeGroup==4),]$Agency.Front))

```

```{r Experience_Index}
UV$Exp.Back = (UV$IS3.Back+UV$IS5.Back+UV$IS6.Back)/3
UV$Exp.Front = (UV$IS3.Front+UV$IS5.Front+UV$IS6.Front)/3

barByAge(UV$Exp.Back,UV$Exp.Front,UV, "Experience Composite")
```

```{r correlations}
cor.test(UV$UVindex.Back,UV$Agency.Back)

cor.test(UV$UVindex.Front,UV$Agency.Front)

cor.test(UV$UVindex.Back,UV$Exp.Back)

cor.test(UV$UVindex.Front,UV$Exp.Front)

cor.test(UV$Agency.Back,UV$Exp.Back)
```

```{r regressions}
UVindex = data.frame(SubID=c(UV$SubID, UV$SubID), 
                     Age=c(UV$Age,UV$Age), 
                     AgeYears=c(UV$AgeYears,UV$AgeYears),
                     AgeGroup=c(UV$AgeGroup,UV$AgeGroup), 
                     Robot=c(rep('Kaspar Back',dim(UV)[1]),rep('Kaspar Front',dim(UV)[1])), 
                     UVindex=c(UV$UVindex.Back,UV$UVindex.Front), 
                     Agency=c(UV$Agency.Back,UV$Agency.Front), 
                     Experience=c(UV$Exp.Back,UV$Exp.Front)) 

UVindex=UVindex[which(!is.na(UVindex$UVindex)),]
UVindex$UVindex.cent = scale(UVindex$UVindex,center=T,scale=T)
UVindex$Agency.cent = scale(UVindex$Agency,center=T,scale=T)
UVindex$Exp.cent = scale(UVindex$Experience,center=T,scale=T)
  
UVindex.old = UVindex[which(UVindex$AgeGroup>2),]
UVindex.young = UVindex[which(UVindex$AgeGroup<3),]


pander(summary(lm(UVindex.cent~Agency.cent+Exp.cent+Age+Robot+Agency.cent*Age+Exp.cent*Age+Robot*Age,data=UVindex)))
pander(summary(lm(UVindex.cent~Agency.cent+Exp.cent+Age+Robot+Agency.cent*Age+Exp.cent*Age+Robot*Age,data=UVindex.old)))

plot(jitter(UVindex$UVindex),(UVindex$Agency))
abline(lm(UVindex$UVindex~UVindex$Agency))
```

```{r scatter_UV}
KasparFront = UVindex[ which( UVindex$Robot=="Kaspar Front"), ]
KasparBack = UVindex[ which( UVindex$Robot=="Kaspar Back"), ]

plot.new()
par(mar=c(5,5,5,5)+0.1)
plot(KasparFront$AgeYears, jitter(KasparFront$UVindex), main = "Uncanny Index", xlab = 'Age (years)', ylab = 'Response', yaxt = 'n', col = humanColor, cex.main = titleSizeSmall, cex.axis = responseAxis, cex.lab = ageAxis)
u <- par("usr") 
rect(u[1], u[3], u[2], u[4], col = plotFill)
points(KasparFront$AgeYears, jitter(KasparFront$UVindex), col = humanColor)
axis(2, at = c(1:4), labels = c('No', 'A little bit', 'A medium amount', 'A lot'), cex.axis = responseAxis)
abline(lm(KasparFront$UVindex~KasparFront$AgeYears), col = humanColor, lwd = lineWidth)
# fit <- lm(KasparFront$UVindex~KasparFront$AgeYears)
# a <- summary(fit)$coefficient['(Intercept)','Estimate']
# b <- summary(fit)$coefficient['KasparFront$AgeYears','Estimate']
# r2 <- format(summary(fit)$adj.r.squared, digits = 3)
# f <- summary(fit)$fstatistic
# p <- format(pf(f[1],f[2],f[3],lower.tail=F), digits = 3)
# p <- ifelse(p<0.001, 0.001, ifelse(p<0.01, 0.01, ifelse(p<0.05,0.05,p)))
# text(((2.5-a)/b)-8, 2.5, bquote(paste( R^2 == .(r2), ', p '< .(p))), col = humanColor, cex = responseAxis)

points(KasparBack$AgeYears, jitter(KasparBack$UVindex), col = machineColor)
abline(lm(KasparBack$UVindex~KasparBack$AgeYears), col = machineColor, lwd = lineWidth)
#fit <- lm(KasparBack$UVindex~KasparBack$AgeYears)
#a <- summary(fit)$coefficient['(Intercept)','Estimate']
#b <- summary(fit)$coefficient['KasparBack$AgeYears','Estimate']
# r2 <- format(summary(fit)$adj.r.squared, digits = 3)
# f <- summary(fit)$fstatistic
# p <- format(pf(f[1],f[2],f[3],lower.tail=F), digits = 3)
# p <- ifelse(p<0.001, 0.001, ifelse(p<0.01, 0.01, ifelse(p<0.05,0.05,p)))
# text(((2.5-a)/b)+8, 2.5, bquote(paste( R^2 == .(r2), ', p '< .(p))), col = machineColor, cex = responseAxis)

legend('topright',c("Human-like", "Machine-like"), col = c("Red","Blue"), lwd = lineWidth, bg = 'white', inset = .025)
```
